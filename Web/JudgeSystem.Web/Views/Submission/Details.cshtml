@inject IViewLocalizer Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer
@model SubmissionViewModel

@{
    this.ViewData["Title"] = Localizer["Submission Details"];
    int zeroTestNumber = 1;
    int testNumber = 1;
    string testIds = string.Join(", ", Model.ExecutedTests.Select(t => t.Id));
}

<h3 class="text-center">@Localizer["Submission by"] @Model.UserUsername @Localizer["for problem"] <span class="text-secondary">"@Model.ProblemName"	</span></h3>

@if (!Model.CompiledSucessfully)
{
    <div class="alert alert-danger mt-3 text-center font-weight-bold" role="alert">
        @Localizer["A compile time error occurred. Ensure your solution compile successfully before submitting it again!"]
    </div>
    <h4 class="font-weight-normal">@Localizer["Compilation errors"]:</h4>
    <div class="container-fluid bg-light border px-3 py-2">@Model.CompilationErrors</div>
}
else
{

    @foreach (var test in Model.ExecutedTests)
    {
        string className = test.ExecutionResultType == TestExecutionResultType.Success && test.IsCorrect ? "text-secondary" : "text-danger";
        @if (test.TestIsTrialTest)
        {
            <h4 class="@className mt-4">@Localizer["Trial test"] #@(zeroTestNumber++) (@test.ExecutionResult)</h4>
            <p>@Localizer["Trial tests are not included in the final score"]!</p>
        }
        else
        {
            <h4 class="@className mt-4">@Localizer["Test"] #@(testNumber++) (@test.ExecutionResult)</h4>
        }

        @if (test.TestIsTrialTest || User.IsInRole(GlobalConstants.AdministratorRoleName))
        {
            <button class="btn btn-dark btn-sm test-input-button" data-id="@test.Id">
                @Localizer["Show Input"]
            </button>
            <div id="test-input-div-@test.Id" class="mt-2">
                <textarea class="d-none" id="test-input-@test.Id">@test.TestInputData</textarea>
            </div>

            @if (test.ExecutionResultType == TestExecutionResultType.RunTimeError)
            {
                <div class="container-fluid bg-light border px-3 py-2 mt-2">@test.Error</div>
            }
            else if (!test.IsCorrect && test.ExecutionResultType == TestExecutionResultType.Success)
            {
                <div class="d-flex justify-content-between">
                    <div class="col-md-6 ml-0 pl-0">
                        <p class="my-2">@Localizer["Expected output"]</p>
                        <textarea class="expected-output d-none">@test.TestOutputData</textarea>
                    </div>
                    <div class="col-md-6">
                        <p class="my-2">@Localizer["Your output"]</p>
                        <textarea class="user-output d-none">@test.Output</textarea>
                    </div>
                </div>
            }
        }

        <p class="pt-1 m-0">@Localizer["Time used"]: @test.TimeUsed</p>
        <p class="pb-2 m-0">@Localizer["Memory used"]: @test.MemoryUsed</p>
    }
}

@if (Model.ProblemSubmissionType == SubmissionType.ZipFile)
{
<a asp-action="Download" asp-controller="Submission" asp-area="" asp-route-id="@Model.Id" class="mt-3 mb-2 btn btn-dark">@Localizer["Download Solution"]</a>
}
else
{
    <div class="mt-5">
        <h4 class="font-weight-normal">@Localizer["Source code"]</h4>
        <textarea id="source-code" class="d-none">@Model.Code</textarea>
    </div>
}

<p>@SharedLocalizer["Submission date"]: @Model.SubmissionDate</p>

@section Scripts{
    <script src="~/lib/codemirror/codemirror.js"></script>
    <script src="~/lib/codemirror/mode/clike/clike.min.js"></script>
    <script>
        let codeTextarea = document.getElementById('source-code');
        if (codeTextarea) {
            var editor = CodeMirror.fromTextArea(codeTextarea,
                {
                    lineNumbers: true,
                    matchBrackets: true,
                    mode: "text/x-c++src",
                    readOnly: 'cursor'
                });
            editor.setValue(codeTextarea.innerText);
        }

        let editors = [];
        let elements = [];
        let currentElement;
        let currentEditor;
    </script>

    @foreach (var test in Model.ExecutedTests)
    {
        <script>
			currentElement = document.getElementById("test-input-@test.Id");
			currentElement.dataset.editorIndex = editors.length;
			elements.push(currentElement);
			currentEditor = CodeMirror.fromTextArea(currentElement,
			{
				lineNumbers: true,
				readOnly: 'cursor'
				});
			editors.push(currentEditor);
        </script>
    }

    <script>
        for (let i = 0; i < editors.length; i++) {
            editors[i].setValue(elements[i].innerText);
            editors[i].setSize("0%", "0px");
        }
    </script>

    <script>
        $('.test-input-button').on('click', (e) => {
            let testId = e.target.dataset.id;
            let editorIndex = document.getElementById('test-input-' + testId).dataset.editorIndex;
            let buttonText = e.target.textContent;

            if (buttonText == "Show Input") {
                e.target.textContent = "Hide Input";
                editors[editorIndex].setSize("100%", "150px")
            }
            else {
                e.target.textContent = "Show Input";
                editors[editorIndex].setSize("0%", "0px")
            }

        });
    </script>

    <script>
        setOutputEditors(".expected-output");
        setOutputEditors(".user-output");

        function setOutputEditors(selector) {
            let textareas = $(selector);
            let textEditor;

            for (let textarea of textareas) {
                textEditor = CodeMirror.fromTextArea(textarea,
                    {
                        lineNumbers: true,
                        readOnly: 'cursor'
                    });
                textEditor.setValue(textarea.textContent);
                textEditor.setSize("100%", "150px");
            }
        }

    </script>
}
